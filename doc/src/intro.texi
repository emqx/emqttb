@node Concepts
@section Concepts: Worker, Group, Scenario...

@b{Worker} is a process that corresponds to a single MQTT client.

@b{Behavior} is a callback module containing functions that workers run in a loop.

@b{Group} is a supervised colletion of workers running the same behavior and sharing the same configuration. Group manager controls the number of workers, restarts failed workers and implements ramp up/down logic.

@b{Scenario} is a callback module that creates several worker groups and manupulates group configuration using autorate.

@b{Autorate} a process that adjusts group parameters (such as number of workers in the group, or worker configuration) based on constants or dynamic parameters, e.g. available RAM or CPU load, observed latency and so on.

@node Topic Patterns
@section Topic Patterns

@code{emqttb} supports pattern substitution in the topic names.

@table @samp
  @item %n
  replaced with the worker ID (integer)
  @item %g
  replaced with the group ID
  @item %h
  replaced with the hostname
  @item %@{rand N@}
  replaced with a random integer in range 1 @dots{} N
@end table


@node Verify Message Sequence
@section Message Sequence Verification

@code{emqttb} has builtin tools for detecting message loss and repetition.

@quotation Warning
Publishers should insert metadata into the payloads in order for this feature to work.
@end quotation

@quotation Warning
This feature can use a lot of RAM to store the sequence numbers for each triple of sender client id, receiver client id, and MQTT topic.
@end quotation

Errors about missing messages and warnings about duplicate messages are printed to the emqttb log.

@heading Prometheus metrics

@table @code
@item emqttb_repeats_number
number of times when the sequence number of the message goes backwards
@item emqttb_gaps_number
number of times when the sequence number of the message skips the messages (a gap)
@item emqttb_repeat_size
rolling average; size of the repeated sequence
@item emqttb_gap_size
rolling average; size of the gap
@end table
